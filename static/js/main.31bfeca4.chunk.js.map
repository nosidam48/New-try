{"version":3,"sources":["Components/Library/index.tsx","Pages/view.tsx","Components/Form/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Note","message","position","type","classNames","concat","react_default","a","createElement","className","console","log","this","props","isOpen","show","React","Component","View","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","noteArray","noteCounter","state","noteToShow","lastProps","lastState","addNote","note","key","String","updateNoteList","_this2","push","setState","setTimeout","shift","_this3","id","map","index","Library","Form","htmlFor","value","info","onChange","name","onClick","onSubmit","App","formData","event","preventDefault","alert","_event$target","target","prevState","objectSpread","defineProperty","react","role","view","Components_Form","handleChange","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31bfeca4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface Props {\n  message: string;\n  position: string;\n  type: string;\n  key: string;\n  isOpen: boolean\n  duration?: number;\n}\n\ninterface State {\n  expired: boolean;\n}\n\nclass Note extends React.Component<Props, State> {\n\n  show(message: string, position: string, type: string): object {\n      const classNames = `note ${position} ${type}`;\n      \n      return (\n          <div className={classNames} >\n              <p className=\"text-notif\">\n                  {message}\n              </p>\n          </div>\n      )\n  }\n\n  \n  render() {\n      console.log(this.props)\n      \n      return this.props.isOpen ? this.show(this.props.message, this.props.position, this.props.type): \"\";\n  }\n\n}\n\nexport default Note;","import React, { Component } from \"react\";\nimport Note from \"../Components/Library\"\n\nexport interface Props {\n    isOpen: boolean,\n    message: string,\n    type: string,\n    position: string,\n}\n\ninterface State {\n    noteToShow:\n        Array<{\n            message: string,\n            position: string,\n            type: string,\n            key: string\n        }>;\n\n}\n\nclass View extends Component<Props, State> { \n    noteArray: Array<any>;\n    noteCounter: number;\n\n    constructor(props: Props) {\n        super(props);\n\n    this.noteArray = []\n\n    this.state = {\n        noteToShow: []\n    }\n\n    this.noteCounter = 0\n\n}\n\n    componentDidUpdate(lastProps: Props, lastState: State) {\n        if (lastProps.isOpen !== this.props.isOpen && this.props.isOpen) {\n            this.addNote(this.props.message, this.props.type, this.props.position);\n        }\n    }\n\n    addNote(message: string, type: string, position: string): void {\n\n        const note = {\n            message: message,\n            position: position,\n            type: type,\n            key: String(this.noteCounter)\n        };\n\n        this.updateNoteList(note);\n    }\n\n    updateNoteList(note: any): void {\n\n        this.noteCounter++;\n        \n        this.noteArray.push(note);\n\n        this.setState( {\n            noteToShow: this.noteArray\n        });\n\n        setTimeout(() => {\n            console.log((\"removed: \" + note));\n            \n            this.noteArray.shift()\n        }, 3000)\n    }\n\n    render() {\n        const positionList = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]\n        return (\n            <section id=\"all-notes\">\n                {\n                    positionList.map((position, index) => (\n                        \n                        <div className=\"notification-area\" id={position} key={index}>\n                            {(this.state.noteToShow || []).map(note => {\n                                \n                                if (position === note.position) {\n                                    return <Note\n                                        message={note.message}\n                                        position={note.position}\n                                        type={note.type}\n                                        key={note.key}\n                                        isOpen={this.props.isOpen}\n                                    />\n                                } else return ''\n                            })}\n                        </div>\n                    ))\n                }\n            </section>\n        )\n    }\n    \n}\n\nexport default View","import React from \"react\";\n\ninterface CustomInput {\n    onChange(event: any),\n    onSubmit(event: any),\n    info: any\n}\n\nclass Form extends React.Component<CustomInput> {\n    constructor(props: any) {\n        super(props)\n    }\n\nrender() {\n    return (\n        <div>\n        <form>\n        <label htmlFor=\"message\">Message:\n        <input type=\"text\" value={this.props.info.message} onChange={this.props.onChange} id=\"message\" name=\"message\"></input>\n        </label>\n        <br></br>\n        <label htmlFor=\"position\">Position: \n        <select value={this.props.info.position} onChange={this.props.onChange} id=\"position\" name=\"position\">\n        <option value=\"topLeft\">Top-left</option>\n        <option value=\"topRight\">Top-right</option>\n        <option value=\"bottomLeft\">Bottom-left</option>\n        <option value=\"bottomRight\">Bottom-right</option>\n        </select>\n        </label>\n        <br></br>\n        <label htmlFor=\"type\">Type: \n        <select value={this.props.info.type} onChange={this.props.onChange} id=\"type\" name=\"type\">\n        <option value=\"alert\">Alert</option>\n        <option value=\"info\">Info</option>\n        <option value=\"warning\">Warning</option>\n        </select>\n        </label>\n        <br></br>\n        <button type=\"submit\" id=\"submit\" onClick={this.props.onSubmit}>Send Message</button>\n        </form>\n        </div>\n    )\n}\n}\n\nexport default Form;","import * as React from 'react';\nimport './Components/Library/style.css';\nimport View from './Pages/view';\nimport Form from './Components/Form';\n\ninterface Props {\n\n}\n\ninterface State {\n    isOpen: boolean;\n    formData: {\n        message: string,\n        type: string,\n        position: string\n    }\n}\n\nclass App extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            formData: {\n                message: \"\",\n                type: \"alert\",\n                position: \"topLeft\"\n            }\n        }\n    }\n\n    addNote(event: any) {\n      event.preventDefault()\n      \n      let message = this.state.formData.message;\n      if (!message) {\n        alert(\"Enter a message fool!\")\n        return\n      }\n      this.setState({isOpen: true})\n        // Toggle the state\n        setTimeout(() => {\n          this.setState({isOpen: false})\n\n      }, 3000)\n\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const {name, value} = event.target;\n        this.setState(prevState => ({\n            formData: {\n                ...prevState.formData, [name]: value\n            }\n        }));\n    }\n\n    public render() {\n        return (\n            <section role=\"main\">\n                <View\n                    isOpen={this.state.isOpen}\n                    message={this.state.formData.message}\n                    type={this.state.formData.type}\n                    position={this.state.formData.position}\n                />\n                <h1>Note Maker 3000</h1>\n                <Form\n                    onChange={this.handleChange.bind(this)}\n                    onSubmit={this.addNote.bind(this)}\n                    info={this.state.formData}\n                />\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}